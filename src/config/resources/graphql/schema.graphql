schema {
  query: Query
  mutation: Mutation
}

"Funktionen, um Auto zu lesen"
type Query {
  autos(suchkriterien: SuchkriterienInput): [Auto!]

  auto(id: ID!): Auto
}

"Funktionen, um Autos neu anzulegen, zu aktualisieren oder zu löschen"
type Mutation {
  create(input: AutoInput!): CreatePayload

  update(input: AutoUpdateInput!): UpdatePayload

  delete(id: ID!): Boolean

  # Mutation, wenn der Login-Zeitpunkt gespeichert wird
  token(username: String!, password: String!): TokenResult
  refresh(refresh_token: String!): TokenResult
}

"Daten zum Modell eines Autos"
type Modell {
  modell: String!
}

"Daten zum Modell eines Autos"
type Bild {
  beschriftung: String!
  contentType: String
}

"Datenschema zu einem Auto, das gelesen wird"
type Auto {
  id: Int!
  version: Int!
  fgnr: String!
  art: Art
  preis: Float!
  lieferbar: Boolean
  datum: String
  schlagwoerter: [String]
  modell: Modell!
  rabatt(short: Boolean): String!
}

enum Art {
  COUPE
  KOMBI
  LIMO
}

"Suchkriterien für Autos"
input SuchkriterienInput {
  modell: String
  fgnr: String
  art: Art
  lieferbar: Boolean
}

"Daten zum Modell eines neuen Autos"
input ModellInput {
  modell: String!
}

"Daten zu den Bilden eines Autos"
input BildInput {
  beschriftung: String!
  contentType: String!
}

"Daten für ein neues Auto"
input AutoInput {
  fgnr: String
  art: Art
  preis: Float
  rabatt: Float
  lieferbar: Boolean
  datum: String
  schlagwoerter: [String]
  modell: ModellInput!
  bilder: [BildInput!]
}

type CreatePayload {
  id: Int
}

"Daten für ein zu änderndes Auto"
input AutoUpdateInput {
  id: ID
  version: Int
  fgnr: String
  art: Art
  preis: Float
  rabatt: Float
  lieferbar: Boolean
  datum: String
  schlagwoerter: [String]
}

type UpdatePayload {
  version: Int
}

type TokenResult {
  access_token: String!
  expires_in: Int!
  refresh_token: String!
  refresh_expires_in: Int!
}
